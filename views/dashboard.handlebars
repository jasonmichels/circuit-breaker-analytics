<div class="row">
    <div class="col-md-12 page-header">
        <h1>{{title}}</h1>
    </div>
</div>


<div class="row">
    <div class="col-md-9">
        <div id="chart_div_1"></div>
    </div>
    <div class="col-md-3">
        <div class="row">
            <div class="col-md-12 lead">
                <strong>HistoryMongoDB</strong>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 lead">
                <span class="text-muted">Host:</span> <strong id="historyMongoRequestsPerSecond">0/s</strong>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="alert alert-success" role="alert">
                    <span class="lead"><span class="text-muted">Circuit</span> <strong>Closed</strong></span>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 lead">
                <span class="text-muted">Error:</span> <span class="text-danger"><strong id="historyMongoErrorPercent">0%</strong></span>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 lead">
                <span class="text-muted">Mean:</span> <span class="text-success"><strong id="historyMongoMean">0ms</strong></span>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-3 bg-success padded">
        Successes <span class="badge" id="historyMongoSuccessRequests">0</span>
    </div>
    <div class="col-md-3 bg-danger padded">
        Rejected <span class="badge" id="historyMongoRejectedRequests">0</span>
    </div>
    <div class="col-md-3 bg-warning padded">
        Timeouts <span class="badge" id="historyMongoTimeoutsRequests">0</span>
    </div>
    <div class="col-md-3 bg-danger padded">
        Exceptions <span class="badge" id="historyMongoExceptionsRequests">0</span>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="dashed-line"></div>
    </div>
</div>

<script>
    $( document ).ready(function() {
        var socket = io();

        var eventsData = [];

        socket.on('eventWasCreated', function(data){
            eventsData.push(data);
            console.log(data);
        });

        var chart = new google.visualization.LineChart(document.getElementById('chart_div_1'));

        var data = new google.visualization.DataTable();
        data.addColumn('number', 'X');
        data.addColumn('number', 'Requests');
        data.addRows([
            [0, 0]
        ]);

        function drawBasic(data, chart) {

            var options = {
                hAxis: {
                    title: 'Time'
                },
                vAxis: {
                    title: 'Requests'
                }
            };

            chart.draw(data, options);
        }

        google.load('visualization', '1', {packages: ['corechart', 'line']});
        google.setOnLoadCallback(drawBasic(data, chart));

        var updateRequestsCount = function (success, rejected, timeouts, exceptions) {
            $("#historyMongoSuccessRequests").html(success);
            $("#historyMongoRejectedRequests").html(rejected);
            $("#historyMongoTimeoutsRequests").html(timeouts);
            $("#historyMongoExceptionsRequests").html(exceptions);
        };

        var updateRequestsPerSecond = function (totalRequests) {
            var requestsPerSecond = Math.round(totalRequests/120);
            $("#historyMongoRequestsPerSecond").html(requestsPerSecond + '\s');
        };

        var updateCircuitStatus = function (event) {
            // @TODO Still need to do this
        };

        var updateMeanTime = function (totalRequestTime, totalRequestsCount) {
            var mean = totalRequestTime/totalRequestsCount;

            if (isNaN(mean)) {
                mean = 0;
            }

            $("#historyMongoMean").html(mean.toFixed(4) + "ms");
        };

        var updateErrorPercentage = function (errorRequestsCount, totalRequestsCount) {
            var errorPercent = (errorRequestsCount / totalRequestsCount) * 100;
            $("#historyMongoErrorPercent").html(errorPercent + "%");
        };


        setInterval(function(){

            var successRequests = 0;
            var rejectedRequests = 0;
            var timeouts = 0;
            var exceptions = 0;
            var totalRequests = 0;
            var totalRequestTime = 0;

            var eventsSum = [];
            var points = [];

            var now = new Date();

            var lastElement = null;

            /**
             * Loop through the incoming events and calculate data necessary for front end
             */
            eventsData.forEach(function (event) {

                var date = new Date(event.createdAt);
                var gap = Math.round((now.getTime() - date.getTime()) / 1000); // the gap between two in seconds

                if (gap >= 120) {
                    var eventIndex = eventsData.indexOf(event);
                    delete eventsData[eventIndex]; // delete any older requests no longer tracked
                } else {
                    switch (event.requestResponseType) {
                        case "success":
                            successRequests++;
                            break;
                        case "rejected":
                            rejectedRequests++;
                            break;
                        case "timeout":
                            timeouts++;
                            break;
                        case "exception":
                            exceptions++;
                            break;
                        default:
                        // not sure what new event this is
                    }

                    // find the point in the dataArray and ++ or create a new point
                    if (!eventsSum[gap]) {
                        eventsSum[gap] = 1;
                    } else {
                        eventsSum[gap]++;
                    }

                    totalRequests++;
                    totalRequestTime =+ event.requestTime;

                    lastElement = event;
                }
            });

            updateRequestsCount(successRequests, rejectedRequests, timeouts, exceptions);
            updateRequestsPerSecond(totalRequests);
            updateCircuitStatus(lastElement);
            updateMeanTime(totalRequestTime, totalRequests);
            var errorRequestsCount = rejectedRequests + timeouts + exceptions;
            updateErrorPercentage(errorRequestsCount, totalRequests);

            /**
             * Loop through all eventsSum data and create the new points array to pass into google data table
             */
            for (var i = 0; i < 120; i++) {
                if (eventsSum.hasOwnProperty(i)) {
                    points.push([parseInt(i), eventsSum[i]]);
                } else {
                    points.push([parseInt(i), 0]);
                }
            }

            var data = new google.visualization.DataTable();
            data.addColumn('number', 'X');
            data.addColumn('number', 'Requests');
            data.addRows(points);

            drawBasic(data, chart);
        }, 2000);

    });
</script>